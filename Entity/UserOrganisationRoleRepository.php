<?php

namespace RybakDigital\Bundle\UserBundle\Entity;

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\EntityRepository;

/**
 * UserOrganisationRoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserOrganisationRoleRepository extends EntityRepository
{
    public function getUserOrganisations($id, $roles = array(), $includeDescendants = false)
    {
        $orgs = array();

        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select(array('uors', 'organisations'))
            ->leftJoin('uors.user', 'user')
            ->leftJoin('uors.role', 'roles')
            ->leftJoin('uors.organisation', 'organisations')
            ->andWhere('user.id = :id')
            ->andWhere($qb->expr()->in('roles.role', ':roles'))
            ->setParameter('id', $id)
            ->setParameter('roles', $roles);

        $query = $qb->getQuery();

        $res = $query->getResult();

        foreach ($res as $uor) {
            // Get unique organisations only
            $orgs[$uor->getOrganisation()->getId()] = $uor->getOrganisation();

            // Add descendants if required
            if ($includeDescendants) {
                // We want to preserve numeric indexes hance we can not use merge
                $orgs = $orgs + $uor->getOrganisation()->getDescendants();
            }
        }

        return $orgs;
    }

    public function getUserRolesForOrganisation($user, $organisation)
    {
        $roles = array();

        $qb = $this
            ->createQueryBuilder('uors');

        $qb
            ->select(array('uors', 'roles'))
            ->leftJoin('uors.user', 'user')
            ->leftJoin('uors.role', 'roles')
            ->leftJoin('uors.organisation', 'organisation')
            ->andWhere('user.id = :userId')
            ->andWhere('organisation.id = :orgId')
            ->setParameter('userId', $user->getId())
            ->setParameter('orgId', $organisation->getId());

            $query = $qb->getQuery();

            $res = $query->getResult();

        foreach ($res as $uor) {
            $roles[] = $uor->getRole();
        }

        return $roles;
    }
}
